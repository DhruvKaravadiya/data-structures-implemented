import java.util.Stack;

class BST
{
    static Node root;
    public static class Node
    {
        int data;
        Node Left,Right;
        Node(int data)
        {
            this.data=data;
            Left=null;
            Right=null;
        }
    }
    public static void  insert(int data)
    {
        Node nnode=new Node(data);
        if(root==null)
        {
            root=nnode;
        }
        else
        {
            Node temp=root;
            while(temp.Left!=null || temp.Right!=null)
            {
                if(nnode.data>=temp.data && temp.Right!=null)
                {
                    temp=temp.Right;
                }
                else if(nnode.data<temp.data && temp.Left!=null)
                {
                    temp=temp.Left;
                }
                else
                {
                    break;
                }
            }
            if(nnode.data>=temp.data)
            {
                temp.Right=nnode;
            }
            else
            {
                temp.Left=nnode;
            }
        }
    }
    public static void inOrder()
    {
        Node temp=root;
        Stack<Node> st=new Stack<>();
        while(temp!=null || st.size()!=0)
        {
            while(temp!=null)
            {
                st.push(temp);
                temp=temp.Left;
            }
            temp=st.pop();
            System.out.print(temp.data+" ");
            temp=temp.Right;
        }

    }

    // public static void postOrder()
    // {
    //     Node temp=root;
    //     Stack<Node> st=new Stack<>();
    //     while(temp!=null || st.size()!=0)
    //     {
    //         while(temp!=null)
    //         {
    //             st.push(temp);
    //             temp=temp.Left;
    //         }
    //         System.out.print(temp.data+" ");
    //         temp=temp.Right;.
    //         temp=st.pop();
    //     }

    // }
    public  static void preOrder(){
        Stack <Node> st = new Stack<>();
        st.push(root);
        while(st.size()>0){
            Node temp = st.pop();
             System.out.print(temp.data+" ");
             if(temp.Right!=null){
                 st.push(temp.Right);
             }
             if(temp.Left!=null){
                 st.push(temp.Left);
             }
        }
    }
    //  public  static void postOrder(){
    //     Stack <Node> st = new Stack<>();
    //     st.push(r);
    //     while(st.size()>0){
    //         Node temp = st.pop();
    //          System.out.print(temp.data+" ");
    //          if(temp.Left!=null){
    //              st.push(temp.Left);
    //          }
    //          if(temp.Right!=null){
    //              st.push(temp.Right);
    //          }
    //     }
    // }
    public static void postOrder(){
        Stack <Node> st1 = new Stack<>();
        Stack <Node> st2 = new Stack<>();
        st1.push(root);
        while(st1.size()>0){
            Node temp = st1.pop();
            st2.push(temp);
            if(temp.Left!=null){
                st1.push(temp.Left);
            }
            if(temp.Right!=null){
                st1.push(temp.Right);
            }
        }
        while(st2.size()>0){
            Node temp = st2.pop();
            System.out.print(temp.data+" ");
            
        }
    }
    public static void deleteLeafNode(int a){
        Node parent = null;
        Node temp = root;
        while(temp!=null && temp.data!=a){
            parent=temp;
            if(a > temp.data){
                temp = temp.Right;
            }
            else{
                temp = temp.Left;
            }
        }
        if(temp.Left == null && temp.Right == null){
            if(parent.data > temp.data){
                parent.Left = null;
            }
            else{
                parent.Right = null;
            }
        }
    }
}
public class Main
{
    static public  void main(String[] args) {
        BST.insert(5);
        BST.insert(3);
        BST.insert(2);
        BST.insert(1);
        BST.insert(4);
        BST.insert(8);
        BST.insert(6);
        BST.insert(7);
        BST.insert(9);
        System.out.println("\nIn order : ");
        BST.inOrder();
        System.out.println();
        System.out.println("pre order : ");
        BST.preOrder();
        //System.out.println();
        System.out.println("\nPost order : ");
        BST.postOrder();
        BST.deleteLeafNode(7);
        BST.deleteLeafNode(6);
        System.out.println("\nIn order : ");
        BST.inOrder();
        System.out.println();
        System.out.println("pre order : ");
        BST.preOrder();
        //System.out.println();
        System.out.println("\nPost order : ");
        BST.postOrder();
        
    }
}
