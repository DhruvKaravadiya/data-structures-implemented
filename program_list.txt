

|   Remove nth node from Linked List
    Add Two Numbers
    Swap Nodes in Pairs
    Split Linked List in Parts
    Insertion sort on Linked List
    Merge sort on Linked List
    Copy list with random pointers
    Remove zero sum from consecutive nodes from linked list
    Merge k sorted Linked List
    Reverse nodes in k group
    Doubly Linked List
    Adding a node at the front, at the end, after a node or before a node
    Deleting a node from the front, from the end, after a node or before a node
    Circular Doubly Linked List
    LRU Cache
    LFU Cache


hash table

Program to implement a hash table with separate chaining.
Program to handle collisions using open addressing (linear probing, quadratic probing).
Program to implement a hash map.
Program to find the frequency of elements in an array using a hash table.
Program to find the first non-repeating element in an array using a hash table.
Program to check if two strings are anagrams using a hash table.
Program to count the number of distinct elements in an array using a hash table.
Program to check if an array contains a pair of elements that sum up to a given value using a hash table



    //Bubble Sort
    //Selection Sort
    //Insertion Sort
    //Merge Sort
    //Quick Sort
    //Heap Sort
    Radix Sort
    Counting Sort
    Bucket Sort
    Shell Sort
